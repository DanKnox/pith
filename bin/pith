#! /usr/bin/env ruby

$: << File.expand_path("../../lib", __FILE__)

require "rubygems"
require "clamp"
require "pathname"
require "pith/version"
require "thin"

require "pith/console_logger"
require "pith/project"

class PithCommand < Clamp::Command

  option ["-i", "--input"], "INPUT_DIR", "Input directory", :default => "."
  option ["-o", "--output"], "OUTPUT_DIR", "Output directory (default: \"INPUT_DIR/_out\")"

  option ["-n", "--interval"], "INTERVAL", "Rebuild interval", :default => 2 do |n|
    Integer(n)
  end

  option ["-p", "--port"], "PORT", "Web-server port", :default => 4321 do |n|
    Integer(n)
  end

  option "--version", :flag, "Show version" do
    puts Pith::VERSION
    exit(0)
  end

  subcommand "build", "Generate the website (into OUTPUT_DIR)" do
    def execute
      build
    end
  end

  subcommand "watch", "Monitor INPUT_DIR; re-generate as required" do
    def execute
      watch
    end
  end
  
  subcommand "serve", "Serve the generated website" do
    def execute
      build
      Thread.new { watch }
      serve
    end
  end

  protected
  
  def input_dir
    Pathname(input || ".")
  end

  def output_dir
    if output
      Pathname(output)
    else
      input_dir + "_out"
    end
  end
  
  def project
    unless @project
      pith_dir = input_dir + "_pith"
      unless pith_dir.directory?
        signal_usage_error %(No "#{pith_dir}" directory ... this doesn't look right!)
      end
      puts %{Generating to "#{output_dir}"}
      @project = Pith::Project.new(:input_dir => input_dir, :output_dir => output_dir)
      @project.logger = Pith::ConsoleLogger.new
    end
    @project
  end

  def build
    project.build
  end

  def watch
    require "pith/watcher"
    Pith::Watcher.new(project, :interval => interval).call
  end

  def serve
    require "pith/server"
    server = Pith::Server.new(project)
    puts %{>>> Now taking the Pith at "http://localhost:#{port}"}
    Rack::Handler.get("thin").run(server, :Port => port)
  end
  
end

PithCommand.run
