#! /usr/bin/env ruby

$: << File.expand_path("../../lib", __FILE__)

require "rubygems"
require "optparse"
require "pathname"
require "pith/version"

$input_dir = Pathname(".")
$interval = 2
$port = 4321

BANNER = <<EOF
usage: pith [OPTIONS] [COMMAND]

  Commands: (default: "build")

    build       Generate the website (into OUTPUT_DIR)
    watch       Monitor INPUT_DIR, and incrementally rebuild OUTPUT_DIR
    serve       Serve the generated website at "http://localhost:#{$port}"

EOF

OptionParser.new do |opts|
  opts.banner = BANNER
  opts.version = Pith::VERSION
  opts.separator "  Options:"
  opts.on("-i", "--input INPUT_DIR",      %[Input directory   (default: ".")]) do |dir|
    $input_dir = Pathname(dir)
  end
  opts.on("-o", "--output OUTPUT_DIR",    %[Output directory  (default: "INPUT_DIR/_out")]) do |dir|
    $output_dir = Pathname(dir)
  end
  opts.on("-n", "--interval N", Integer,  %[Rebuild interval  (default: #{$interval})]) do |n|
    $interval = n
  end
  opts.on("-p", "--port N", Integer,      %[Web-server port   (default: #{$port})]) do |port|
    $port = port
  end
  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end.parse!

pith_dir = $input_dir + "_pith"
unless pith_dir.directory?
  $stderr.puts %(ERROR: No "#{pith_dir}" directory ... this doesn't look right!)
  exit(1)
end

unless $output_dir
  $output_dir = $input_dir + "_out"
end

puts %{Generating to "#{$output_dir}"}

require "pith/project"
require "pith/console_logger"

@project = Pith::Project.new(:input_dir => $input_dir, :output_dir => $output_dir)
@project.logger = Pith::ConsoleLogger.new

def build
  @project.build
end

def watch
  loop do
    begin
      build
    rescue Exception => e
      $stderr.puts "ERROR: #{e}"
      e.backtrace.each { |line| $stderr.puts line }
    end
    sleep($interval)
  end
end

def serve

  require "pith/server"
  server = Pith::Server.new(@project)
  
  build
  Thread.new { watch }

  puts %{>>> Now taking the Pith at "http://localhost:#{$port}"}
  Rack::Handler.default.run(server, :Port => $port)

end

action = ARGV.shift || "build"
self.send(action)
